{
  "componentName": "C:\\Users\\sliu\\Source\\Repos\\canechair.parts\\src\\CCPComponents\\Charts\\Bar\\test.js",
  "componentFilePath": "C:\\Users\\sliu\\Source\\Repos\\canechair.parts\\src\\CCPComponents\\Charts\\Bar\\test.js",
  "error": {}
},
{
  "componentName": "C:\\Users\\sliu\\Source\\Repos\\canechair.parts\\src\\CCPComponents\\Commons\\CCP_Label\\CCP_Label.js",
  "componentFilePath": "C:\\Users\\sliu\\Source\\Repos\\canechair.parts\\src\\CCPComponents\\Commons\\CCP_Label\\CCP_Label.js",
  "metadata": {
    "description": "Label element.",
    "code": "import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label element. */\nfunction CCP_Label({ displayFor, displayValue }) {\n  return (\n    <label style={{ display: 'block' }} htmlFor={displayFor}>\n      {displayValue}\n    </label>\n  )\n}\n\nLabel.propTypes = {\n  /** The associated element's id */\n  displayFor: PropTypes.string.isRequired,\n\n  /** Label's display value' */\n  displayValue: PropTypes.string.isRequired\n};\n\nexport default CCP_Label;\n"
  }
},
{
  "componentName": "C:\\Users\\sliu\\Source\\Repos\\canechair.parts\\src\\CCPComponents\\Inputs\\CCP_TextField\\CCP_TextField.js",
  "componentFilePath": "C:\\Users\\sliu\\Source\\Repos\\canechair.parts\\src\\CCPComponents\\Inputs\\CCP_TextField\\CCP_TextField.js",
  "metadata": {
    "description": "Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.",
    "props": {
      "textFieldType": {
        "defaultValue": {
          "value": "\"text\"",
          "computed": false
        }
      },
      "isRequired": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "code": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport CCP_Label from '../../Commons/CCP_Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction CCP_TextField({ textFieldId, textFieldType = \"text\", textFieldName, textFieldLabel, isRequired = false, onChangeFunctionName, textFieldPlaceholder, textFieldValue, hasErrors, textFieldChildren, ...props }) {\n  return (\n    <div style={{ marginBottom: 16 }}>\n      <CCP_Label htmlFor={htmlId} label={label} />\n      <input\n        id={textFieldId}\n        type={textFieldType}\n        name={textFieldName}\n        placeholder={textFieldPlaceholder}\n        value={textFieldValue}\n        onChange={onChangeFunctionName}\n        style={hasErrors && { border: 'solid 1px red' }}\n        {...props} />\n      {textFieldChildren}\n      {hasErrors && <div className=\"error\" style={{ color: 'red' }}>{hasErrors}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** The textfields's id. */\n  textFieldId: PropTypes.string.isRequired,\n\n  /** the textField's name. */\n  textFieldName: PropTypes.string.isRequired,\n\n  /** The label for textField. */\n  textFieldLabel: PropTypes.string.isRequired,\n\n  /** The textField's type. (default: text) */\n  textFieldType: PropTypes.string,\n\n  /** Mark if the textFields is required. */\n  isRequired: PropTypes.bool,\n\n  /** The textField's onChange function name */\n  onChangeFunctionName: PropTypes.func.isRequired,\n\n  /** The textField's placeholder */\n  textFieldPlaceholder: PropTypes.string,\n\n  /** The textField's value */\n  textFieldValue: PropTypes.any,\n\n  /** Use for check if the textField has error */\n  hasErrors: PropTypes.string,\n\n  /** The textField's child components */\n  textFieldChildren: PropTypes.node\n};\n\nexport default CCP_TextField;\n"
  }
}
]
