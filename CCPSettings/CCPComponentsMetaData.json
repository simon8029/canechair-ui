[
  {
    "componentName": "test",
    "componentFilePath": "C:\\Users\\simon-pc\\Source\\Repos\\canechair.parts\\src\\CCPComponents\\Charts\\Bar\\test.js",
    "errors": "Error: No suitable component definition found."
  },
  {
    "componentName": "CCP_Label",
    "componentFilePath": "C:\\Users\\simon-pc\\Source\\Repos\\canechair.parts\\src\\CCPComponents\\Commons\\CCP_Label\\CCP_Label.js",
    "metadata": {
      "description": "Label element.",
      "code": "import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Label element. */\r\nfunction CCP_Label({ displayFor, displayValue }) {\r\n  return (\r\n    <label style={{ display: 'block' }} htmlFor={displayFor}>\r\n      {displayValue}\r\n    </label>\r\n  )\r\n}\r\n\r\nLabel.propTypes = {\r\n  /** The associated element's id */\r\n  displayFor: PropTypes.string.isRequired,\r\n\r\n  /** Label's display value' */\r\n  displayValue: PropTypes.string.isRequired\r\n};\r\n\r\nexport default CCP_Label;\r\n"
    }
  },
  {
    "componentName": "CCP_TextField",
    "componentFilePath": "C:\\Users\\simon-pc\\Source\\Repos\\canechair.parts\\src\\CCPComponents\\Inputs\\CCP_TextField\\CCP_TextField.js",
    "metadata": {
      "description": "Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.",
      "props": {
        "textFieldType": {
          "defaultValue": {
            "value": "\"text\"",
            "computed": false
          }
        },
        "isRequired": {
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      },
      "code": "import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CCP_Label from '../../Commons/CCP_Label';\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction CCP_TextField({ textFieldId, textFieldType = \"text\", textFieldName, textFieldLabel, isRequired = false, onChangeFunctionName, textFieldPlaceholder, textFieldValue, hasErrors, textFieldChildren, ...props }) {\r\n  return (\r\n    <div style={{ marginBottom: 16 }}>\r\n      <CCP_Label htmlFor={htmlId} label={label} />\r\n      <input\r\n        id={textFieldId}\r\n        type={textFieldType}\r\n        name={textFieldName}\r\n        placeholder={textFieldPlaceholder}\r\n        value={textFieldValue}\r\n        onChange={onChangeFunctionName}\r\n        style={hasErrors && { border: 'solid 1px red' }}\r\n        {...props} />\r\n      {textFieldChildren}\r\n      {hasErrors && <div className=\"error\" style={{ color: 'red' }}>{hasErrors}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInput.propTypes = {\r\n  /** The textfields's id. */\r\n  textFieldId: PropTypes.string.isRequired,\r\n\r\n  /** the textField's name. */\r\n  textFieldName: PropTypes.string.isRequired,\r\n\r\n  /** The label for textField. */\r\n  textFieldLabel: PropTypes.string.isRequired,\r\n\r\n  /** The textField's type. (default: text) */\r\n  textFieldType: PropTypes.string,\r\n\r\n  /** Mark if the textFields is required. */\r\n  isRequired: PropTypes.bool,\r\n\r\n  /** The textField's onChange function name */\r\n  onChangeFunctionName: PropTypes.func.isRequired,\r\n\r\n  /** The textField's placeholder */\r\n  textFieldPlaceholder: PropTypes.string,\r\n\r\n  /** The textField's value */\r\n  textFieldValue: PropTypes.any,\r\n\r\n  /** Use for check if the textField has error */\r\n  hasErrors: PropTypes.string,\r\n\r\n  /** The textField's child components */\r\n  textFieldChildren: PropTypes.node\r\n};\r\n\r\nexport default CCP_TextField;\r\n"
    }
  }
]
